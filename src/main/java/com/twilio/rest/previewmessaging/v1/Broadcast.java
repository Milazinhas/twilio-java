/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Bulk Messaging and Broadcast
 * Bulk Sending is a public Twilio REST API for 1:Many Message creation up to 100 recipients. Broadcast is a public Twilio REST API for 1:Many Message creation up to 10,000 recipients via file upload.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.twilio.rest.previewmessaging.v1;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.twilio.base.Resource;
import com.twilio.converter.DateConverter;
import com.twilio.exception.ApiConnectionException;

import com.twilio.exception.ApiException;

import lombok.ToString;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.time.ZonedDateTime;

import java.util.Objects;

import lombok.Getter;
import lombok.Setter;
import lombok.ToString;


@JsonIgnoreProperties(ignoreUnknown = true)
@ToString
public class Broadcast extends Resource {
    private static final long serialVersionUID = 149206954899826L;

    
        @ToString
        static public class MessagingV1BroadcastExecutionDetails {
            @JsonInclude(JsonInclude.Include.NON_EMPTY)
            @JsonProperty("total_records")
            @Getter @Setter private Integer totalRecords;

            @JsonInclude(JsonInclude.Include.NON_EMPTY)
            @JsonProperty("total_completed")
            @Getter @Setter private Integer totalCompleted;

            @JsonInclude(JsonInclude.Include.NON_EMPTY)
            @JsonProperty("total_errors")
            @Getter @Setter private Integer totalErrors;


            public static MessagingV1BroadcastExecutionDetails fromJson(String jsonString, ObjectMapper mapper) throws IOException {
                return mapper.readValue(jsonString, MessagingV1BroadcastExecutionDetails.class);
            }
        }

    public static BroadcastCreator creator(){
        return new BroadcastCreator();
    }

    /**
    * Converts a JSON String into a Broadcast object using the provided ObjectMapper.
    *
    * @param json Raw JSON String
    * @param objectMapper Jackson ObjectMapper
    * @return Broadcast object represented by the provided JSON
    */
    public static Broadcast fromJson(final String json, final ObjectMapper objectMapper) {
        // Convert all checked exceptions to Runtime
        try {
            return objectMapper.readValue(json, Broadcast.class);
        } catch (final JsonMappingException | JsonParseException e) {
            throw new ApiException(e.getMessage(), e);
        } catch (final IOException e) {
            throw new ApiConnectionException(e.getMessage(), e);
        }
    }

    /**
    * Converts a JSON InputStream into a Broadcast object using the provided
    * ObjectMapper.
    *
    * @param json Raw JSON InputStream
    * @param objectMapper Jackson ObjectMapper
    * @return Broadcast object represented by the provided JSON
    */
    public static Broadcast fromJson(final InputStream json, final ObjectMapper objectMapper) {
        // Convert all checked exceptions to Runtime
        try {
            return objectMapper.readValue(json, Broadcast.class);
        } catch (final JsonMappingException | JsonParseException e) {
            throw new ApiException(e.getMessage(), e);
        } catch (final IOException e) {
            throw new ApiConnectionException(e.getMessage(), e);
        }
    }


    private final String broadcastSid;
    private final ZonedDateTime createdDate;
    private final ZonedDateTime updatedDate;
    private final String broadcastStatus;
    private final MessagingV1BroadcastExecutionDetails executionDetails;
    private final URI errorsFile;

    @JsonCreator
    private Broadcast(
        @JsonProperty("broadcast_sid")
        final String broadcastSid,

        @JsonProperty("created_date")
        final String createdDate,

        @JsonProperty("updated_date")
        final String updatedDate,

        @JsonProperty("broadcast_status")
        final String broadcastStatus,

        @JsonProperty("execution_details")
        final MessagingV1BroadcastExecutionDetails executionDetails,

        @JsonProperty("errors_file")
        final URI errorsFile
    ) {
        this.broadcastSid = broadcastSid;
        this.createdDate = DateConverter.iso8601DateTimeFromString(createdDate);
        this.updatedDate = DateConverter.iso8601DateTimeFromString(updatedDate);
        this.broadcastStatus = broadcastStatus;
        this.executionDetails = executionDetails;
        this.errorsFile = errorsFile;
    }

        public final String getBroadcastSid() {
            return this.broadcastSid;
        }
        public final ZonedDateTime getCreatedDate() {
            return this.createdDate;
        }
        public final ZonedDateTime getUpdatedDate() {
            return this.updatedDate;
        }
        public final String getBroadcastStatus() {
            return this.broadcastStatus;
        }
        public final MessagingV1BroadcastExecutionDetails getExecutionDetails() {
            return this.executionDetails;
        }
        public final URI getErrorsFile() {
            return this.errorsFile;
        }

    @Override
    public boolean equals(final Object o) {
        if (this==o) {
            return true;
        }

        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        Broadcast other = (Broadcast) o;

        return Objects.equals(broadcastSid, other.broadcastSid) &&  Objects.equals(createdDate, other.createdDate) &&  Objects.equals(updatedDate, other.updatedDate) &&  Objects.equals(broadcastStatus, other.broadcastStatus) &&  Objects.equals(executionDetails, other.executionDetails) &&  Objects.equals(errorsFile, other.errorsFile)  ;
    }

    @Override
    public int hashCode() {
        return Objects.hash(broadcastSid, createdDate, updatedDate, broadcastStatus, executionDetails, errorsFile);
    }


}

